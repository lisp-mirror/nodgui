(in-package :aabb2)

(defun make-aabb2 (&optional
                     (min-x most-positive-single-float)
                     (min-y most-positive-single-float)
                     (max-x most-negative-single-float)
                     (max-y most-negative-single-float))
  (make-array 4
              :element-type 'to::desired-type
              :initial-contents (list min-x min-y max-x max-y)
              :adjustable nil))

(defun copy-aabb2 (old)
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) old))
  (make-aabb2 (elt old 0)
              (elt old 1)
              (elt old 2)
              (elt old 3)))

(defun aabb2~ (a b)
  (declare ((simple-array to::desired-type) a b))
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (and (u:epsilon= (elt a 0) (elt b 0))
       (u:epsilon= (elt a 1) (elt b 1))
       (u:epsilon= (elt a 2) (elt b 2))
       (u:epsilon= (elt a 3) (elt b 3))))

(u:definline aabb2-min-x (aabb)
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (elt aabb 0))

(u:definline aabb2-max-x (aabb)
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (elt aabb 2))

(u:definline aabb2-min-y (aabb)
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (elt aabb 1))

(u:definline aabb2-max-y (aabb)
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (elt aabb 3))

(defsetf aabb2-min-x (aabb) (new-val)
  `(setf (elt ,aabb 0) ,new-val))

(defsetf aabb2-min-y (aabb) (new-val)
  `(setf (elt ,aabb 1) ,new-val))

(defsetf aabb2-max-x (aabb) (new-val)
  `(setf (elt ,aabb 2) ,new-val))

(defsetf aabb2-max-y (aabb) (new-val)
  `(setf (elt ,aabb 3) ,new-val))

(define-condition invalid-aabb-error (error)
  ((aabb
    :initarg :aabb
    :reader aabb))
  (:report (lambda (condition stream)
             (format stream "invalid aabb ~a" (aabb condition))))
  (:documentation "Error when aabb is invalid"))

(defun valid-aabb2-p (aabb)
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (and (>= (elt aabb 0) 0)
       (>= (elt aabb 1) 0)
       (>= (elt aabb 2) 0)
       (>= (elt aabb 3) 0)
       (> (elt aabb 2) (elt aabb 0))
       (> (elt aabb 3) (elt aabb 1))))

(defun expand-aabb2 (aabb coord)
  #.nodgui.config:default-optimization
  ;;(declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (declare (vec2:vec2 coord))
  (let ((cp (copy-aabb2 aabb)))
    (declare ((simple-array to::desired-type) cp))
    (declare (dynamic-extent cp))
    (when (< (elt coord 0)
             (aabb2:aabb2-min-x aabb))
      (setf (aabb2:aabb2-min-x cp)
            (elt coord 0)))
    (when (> (elt coord 0)
             (aabb2:aabb2-max-x aabb))
      (setf (aabb2:aabb2-max-x cp)
            (elt coord 0)))
    (when (< (elt coord 1)
             (aabb2:aabb2-min-y aabb))
      (setf (aabb2:aabb2-min-y cp)
            (elt coord 1)))
    (when (> (elt coord 1)
             (aabb2:aabb2-max-y aabb))
      (setf (aabb2:aabb2-max-y cp)
            (elt coord 1)))
    cp))

(defun nexpand-aabb2 (aabb coord)
  #.nodgui.config:default-optimization
  ;;(declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (declare (vec2:vec2 coord))
  (when (< (elt coord 0)
           (aabb2:aabb2-min-x aabb))
    (setf (aabb2:aabb2-min-x aabb)
          (elt coord 0)))
  (when (> (elt coord 0)
           (aabb2:aabb2-max-x aabb))
    (setf (aabb2:aabb2-max-x aabb)
          (elt coord 0)))
  (when (< (elt coord 1)
           (aabb2:aabb2-min-y aabb))
    (setf (aabb2:aabb2-min-y aabb)
          (elt coord 1)))
  (when (> (elt coord 1)
           (aabb2:aabb2-max-y aabb))
    (setf (aabb2:aabb2-max-y aabb)
          (elt coord 1)))
  aabb)

(defun expand-corners-aabb2 (aabb size)
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (declare (to::desired-type size))
  (let* ((res       (copy-aabb2 aabb))
         (new-min-x (to:d- (aabb2-min-x aabb) size))
         (new-min-y (to:d- (aabb2-min-y aabb) size))
         (new-max-x (to:d+ (aabb2-max-x aabb) size))
         (new-max-y (to:d+ (aabb2-max-y aabb) size)))
    (nexpand-aabb2 res (vec2:vec2 new-min-x new-min-y))
    (nexpand-aabb2 res (vec2:vec2 new-max-x new-max-y))
    res))

(defun union-aabb2 (aabb aabb2)
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb aabb2))
  (let ((cp (copy-aabb2 aabb)))
    (setf cp (expand-aabb2 cp (subseq aabb2 0 2)))
    (setf cp (expand-aabb2 cp (vec2:vec2 (elt aabb2 2) (elt aabb2 1))))
    (setf cp (expand-aabb2 cp (vec2:vec2 (elt aabb2 2) (elt aabb2 3))))
    (setf cp (expand-aabb2 cp (vec2:vec2 (elt aabb2 0) (elt aabb2 3))))
    cp))

(defun aabb2->rect2 (aabb)
  "(upper-left-x upper-left-y bottom-right-x bottom-right-y) to
   (upper-left-x upper-left-y  w h)"
  #.nodgui.config:default-optimization
  ;;(declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (let ((x1 (elt aabb 0))
        (y1 (elt aabb 1))
        (x2 (elt aabb 2))
        (y2 (elt aabb 3)))
    (declare (to::desired-type x1 y1 x2 y2))
    (make-aabb2 x1 y1 (- x2 x1) (- y2 y1))))

(defun aabb2-width (aabb)
  #.nodgui.config:default-optimization
  ;;(declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (to:d- (aabb2-max-x aabb)
         (aabb2-min-x aabb)))

(defun aabb2-height (aabb)
  #.nodgui.config:default-optimization
  ;;(declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (to:d- (aabb2-max-y aabb)
         (aabb2-min-y aabb)))

(defun aabb2-area (aabb)
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (let ((rect (aabb2->rect2 aabb)))
    (declare (dynamic-extent rect))
    (to:d* (elt rect 2)
           (elt rect 3))))

(defun rect2->aabb2 (coords)
  "(upper-left-x upper-left-y  w h) to
   (upper-left-x upper-left-y bottom-right-x bottom-right-y)"
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) coords))
  (let ((x1 (elt coords 0))
        (y1 (elt coords 1))
        (w  (elt coords 2))
        (h  (elt coords 3)))
    (declare (dynamic-extent x1 y1 w h))
  (make-aabb2 x1 y1 (to:d+ x1 w) (to:d+ y1 h))))

(defun inside-aabb2-p (aabb x y)
  "t if x y is inside this bounding box
   aabb is: (upper-left-x upper-left-y bottom-right-x bottom-right-y)"
  #.nodgui.config:default-optimization
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (declare (to::desired-type x y))
  (and (to:d>= x (elt aabb 0))
       (to:d<= x (elt aabb 2))
       (to:d>= y (elt aabb 1))
       (to:d<= y (elt aabb 3))))

(defun aabb2-intersect-p (aabb1 aabb2)
  #.nodgui.config:default-optimization
  ;;(declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb1 aabb2))
  (if (or (to:d>       (aabb2-min-x aabb1) (aabb2-max-x aabb2))
          (u:epsilon=  (aabb2-min-x aabb1) (aabb2-max-x aabb2))
          (to:d<       (aabb2-max-x aabb1) (aabb2-min-x aabb2))
          (u:epsilon=  (aabb2-max-x aabb1) (aabb2-min-x aabb2))
          (to:d>       (aabb2-min-y aabb1) (aabb2-max-y aabb2))
          (u:epsilon=  (aabb2-min-y aabb1) (aabb2-max-y aabb2))
          (to:d<       (aabb2-max-y aabb1) (aabb2-min-y aabb2))
          (u:epsilon=  (aabb2-max-y aabb1) (aabb2-min-y aabb2)))
      nil
      t))

(defun aabb2-inglobe-p (host guest)
  (and (inside-aabb2-p host (aabb2-min-x guest) (aabb2-min-y guest))
       (inside-aabb2-p host (aabb2-max-x guest) (aabb2-max-y guest))))

(defun approx-aabb2-intersect-p (aabb1 aabb2 enlarge)
  (if enlarge
   (not (and (u:epsilon= (elt aabb1 0) (elt aabb2 2))
             (u:epsilon= (elt aabb1 2) (elt aabb2 0))
             (u:epsilon= (elt aabb1 1) (elt aabb2 3))
             (u:epsilon= (elt aabb1 3) (elt aabb2 1))))
   (not (or (u:epsilon= (elt aabb1 0) (elt aabb2 2))
            (u:epsilon= (elt aabb1 2) (elt aabb2 0))
            (u:epsilon= (elt aabb1 1) (elt aabb2 3))
            (u:epsilon= (elt aabb1 3) (elt aabb2 1))))))

(defun aabb2-null-p (aabb)
  (let ((rect (aabb2->rect2 aabb)))
    (declare (dynamic-extent rect))
    (and (= 0 (elt rect 2))
         (= 0 (elt rect 3)))))

(defun trasl-aabb2 (aabb &optional (dx (to:d- (elt aabb 0))) (dy (to:d- (elt aabb 1))))
  #.nodgui.config:default-optimization
  (declare ((simple-array to::desired-type) aabb))
  (declare (to::desired-type dx dy))
  (make-aabb2 (to:d+ (elt aabb 0) dx)
              (to:d+ (elt aabb 1) dy)
              (to:d+ (elt aabb 2) dx)
              (to:d+ (elt aabb 3) dy)))

(defun trasl-rect2 (rect &optional (dx (to:d- (elt rect 0))) (dy (to:d- (elt rect 1))))
  #.nodgui.config:default-optimization
  (declare ((simple-array to::desired-type) rect))
  (declare (to::desired-type dx dy))
  (make-aabb2 (to:d+ (elt rect 0) dx)
              (to:d+ (elt rect 1) dy)
              (elt rect 2)
              (elt rect 3)))

(defun rotate-aabb2* (aabb angle)
  #.nodgui.config:default-optimization
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (declare (to::desired-type angle))
  (let* ((r1  (vec2:vec2-rotate (vec2:vec2 (elt aabb 0) (elt aabb 1)) angle))
         (r2  (vec2:vec2-rotate (vec2:vec2 (elt aabb 2) (elt aabb 1)) angle))
         (r3  (vec2:vec2-rotate (vec2:vec2 (elt aabb 2) (elt aabb 3)) angle))
         (r4  (vec2:vec2-rotate (vec2:vec2 (elt aabb 0) (elt aabb 3)) angle))
         (res (make-aabb2)))
    (declare (dynamic-extent r1 r2 r3 r4))
    (declare (vec2:vec2 r1 r2 r3 r4))
    (nexpand-aabb2 res r1)
    (nexpand-aabb2 res r2)
    (nexpand-aabb2 res r3)
    (nexpand-aabb2 res r4)
    res))

(defun center-aabb2 (aabb)
  #.nodgui.config:default-optimization
  ;;(declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (let* ((min-x (aabb2-min-x aabb))
         (min-y (aabb2-min-y aabb))
         (w     (to:d- (aabb2-max-x aabb) min-x))
         (h     (to:d- (aabb2-max-y aabb) min-y)))
    (declare (dynamic-extent w h min-x min-y))
    (declare (to::desired-type w h))
    (vec2:vec2 (to:d+ min-x (to:d/ w 2f0))
               (to:d+ min-y (to:d/ h 2f0)))))

(defun rotate-aabb2 (aabb angle &optional (pivot (list 0 0)))
  (let ((traslated (trasl-aabb2 aabb (- (elt pivot 0)) (- (elt pivot 1)))))
    (trasl-aabb2 (rotate-aabb2* traslated angle) (elt pivot 0) (elt pivot 1))))

(defun scale-aabb2 (aabb scale-x scale-y)
  ;; (declare (optimize (speed 3) (debug 0) (safety 0)))
  (declare ((simple-array to::desired-type) aabb))
  (declare (to::desired-type scale-x scale-y))
  (let* ((center     (center-aabb2 aabb))
         (cx         (elt center 0))
         (cy         (elt center 1))
         (translated (trasl-aabb2 aabb (- cx) (- cy)))
         (a          (to:d* (aabb2-min-x translated) scale-x))
         (b          (to:d* (aabb2-min-y translated) scale-y))
         (c          (to:d* (aabb2-max-x translated) scale-x))
         (d          (to:d* (aabb2-max-y translated) scale-y)))
    (declare (dynamic-extent center cx cy translated a b c d))
    (declare ((simple-array to::desired-type) translated))
    (declare (to::desired-type cx cy a b c d))
    (declare (vec2:vec2 center))
    (make-aabb2 (to:d+ a cx) (to:d+ b cy) (to:d+ c cx) (to:d+ d cy))))
